datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id   Int     @id @default(autoincrement())
  uuid String? @default(uuid())
  name String

  // Somecase we need fetch password (non hashed)
  password String

  email String @unique

  // dbAuth
  hashedPassword String @default("")
  salt           String @default("")

  // => Type: Text
  refreshToken String?
  // resetToken          String?
  // resetTokenExpiresAt DateTime?

  // => Roles: as a admin or customer
  user_type String

  created_at DateTime? @default(now())
  updated_at DateTime?

  phone_number String?
  address      String?

  customer Customer[]

  @@map("users")
}

model Vehicle {
  id Int @id @default(autoincrement())

  // => Is a plat number, like: DK 1..
  name      String
  serialNum String  @unique
  year      Int
  details   String?

  created_by Int
  updated_by Int?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  service Service[]
  @@map("vehicle")
}

model Schedule {
  id        Int      @id @default(autoincrement())
  time_from DateTime
  time_to   DateTime

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  service_id Int
  service    Service @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@map("schedule")
}

model Mechanic {
  id        Int     @id @default(autoincrement())
  person_id Int     @unique
  name      String
  is_active Boolean @default(false)
  address   String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  service   Service[]
  partsUsed PartUsed[]

  @@map("mechanic")
}

model Service {
  id      Int      @id @default(autoincrement())
  uuid    String?  @default(uuid())
  status  String   @default(value: "pending")
  message String?
  price   Decimal?

  created_by Int
  updated_by Int?

  vehicle_id Int
  vehicle    Vehicle @relation(fields: [vehicle_id], references: [id])

  mechanic_id Int
  mechanic    Mechanic @relation(fields: [mechanic_id], references: [id])

  customer_id Int
  customer    Customer @relation(fields: [customer_id], references: [id])

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  partsUsed PartUsed[]
  schedule  Schedule[]

  @@map("services")
}

// => In
model Part {
  id          Int       @id @default(autoincrement())
  name        String
  part_number Int       @unique
  in_date     DateTime? @default(now())
  qty         Int
  price       Decimal
  description String?

  PartsUsed PartUsed[]
  @@map("parts")
}

// => Out
model PartUsed {
  id Int @id @default(autoincrement())

  part_id Int
  parts   Part @relation(fields: [part_id], references: [id])

  mechanic_id Int
  mechanic    Mechanic @relation(fields: [mechanic_id], references: [id])

  service_id Int
  service    Service @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@map("parts_used")
}

model Customer {
  id Int @id @default(autoincrement())

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  service Service[]
  @@map("customer")
}
